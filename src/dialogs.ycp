/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/openvas-security-scanner/dialogs.ycp
 * Package:	Configuration of openvas-security-scanner
 * Summary:	Dialogs definitions
 * Authors:	Felix Wolfsteller <felix.wolfsteller@intevation.de>
 *
 * $**Id$
 */

{

textdomain "openvas-security-scanner";

import "Label";
import "Wizard";
import "OpenvasSecurityScanner";
import "Popup";

include "openvas-security-scanner/helps.ycp";

/**
 * OpenVAS Scan-Server Configuration Dialog
 *
 * @return any dialog result
 */
any ScannerConfigurationDialog () {
    string caption = _("OpenVAS Security Scanner Configuration");

    boolean no_feed_selected = (OpenvasSecurityScanner::feed_choice == nil ||
                                OpenvasSecurityScanner::feed_choice == "No Feed" ||
                                OpenvasSecurityScanner::feed_choice == "");

    term radio_group = `VBox ();
    radio_group = add (radio_group, `Left(
                                        `RadioButton(`id(`no_feed), `opt(`notify), _("&Disable OpenVAS Security Scanner"), no_feed_selected) ));

    radio_group = add (radio_group, `Left(
                                        `RadioButton(`id(`onf), `opt(`notify), _("Enable and use &OpenVAS NVT Feed"), (OpenvasSecurityScanner::feed_choice == "OpenVAS NVT Feed")) ));

    // Disable the Greenbone Security Feed option if the GSF scripts are not installed / activated
    if (OpenvasSecurityScanner::IsGSFInstalled ())
    {
        radio_group = add (radio_group, `Left(`RadioButton(`id(`gsf), `opt(`notify), _("Enable and use &Greenbone Security Feed"), (OpenvasSecurityScanner::feed_choice == "Greenbone Security Feed")) ));
    }
    else
    {
        radio_group = add (radio_group, `Left(`RadioButton(`id(`gsf), `opt(`disabled), _("Enable and use &Greenbone Security Feed"), false) ));
    }

    term radio_box = `RadioButtonGroup (`id(`feed), `HVSquash(radio_group));

    term gsf_box = `VBox ();
    if (OpenvasSecurityScanner::IsGSFInstalled ())
    {
        gsf_box = add (gsf_box, `PushButton(`id(`activate_gsf),   `opt(`notify, `disabled), _("&Activate Greenbone Security Feed Subscription")));
        gsf_box = add (gsf_box, `PushButton(`id(`deactivate_gsf), `opt(`notify),            _("D&eactivate Greenbone Security Feed Subscription")));
    }
    else
    {
        gsf_box = add (gsf_box, `PushButton(`id(`activate_gsf),   `opt(`notify),            _("&Activate Greenbone Security Feed Subscription")));
        gsf_box = add (gsf_box, `PushButton(`id(`deactivate_gsf), `opt(`notify, `disabled), _("D&eactivate Greenbone Security Feed Subscription")));
    }

    // Disable the "Sync Now" button if no feed is selected / the OpenVAS service is disabled.
    term feed_management_box = `VBox();
    term sync_now_button = (no_feed_selected) ? `PushButton(`id(`feedsync_now), `opt(`disabled), _("&Synchronize with Feed now"))
                                              : `PushButton(`id(`feedsync_now), `opt(`notify),   _("&Synchronize with Feed now"));
    feed_management_box = add (feed_management_box, sync_now_button);

    term croncheckbox = `CheckBox(`id(`cronjob), _("Do a da&ily feed synchronization"), OpenvasSecurityScanner::daily_sync);

    feed_management_box = add (feed_management_box, croncheckbox);


    integer w = 38;
    term contents = `VBox (`Frame ("Security Scanner Service",        `MinSize (w, 0, radio_box)), `VSpacing (1),
                           `Frame ("Professional Feed Subscriptions", `MinSize (w, 0, gsf_box)), `VSpacing (1),
                           `Frame ("Feed Management",                 `MinSize (w, 0, feed_management_box)), `VSpacing (1) );

    Wizard::SetContentsButtons (caption, contents,
                               HELPS["configuration"]:"",
                               Label::BackButton (), Label::FinishButton ());
    Wizard::DisableBackButton();

    // Does not make sense to have synchronize with "no feed", disable widgets in that case
    if (no_feed_selected)
      {
        UI::ChangeWidget (`id(`cronjob), `Enabled, false);
        UI::ChangeWidget (`id(`cronjob), `Value, false);
      }

    any ret = nil;
    while (true) {
        ret = UI::UserInput ();

        // handle no feed, onf, gsf and en/disable the daily sync checkbox accordingly.
        if (ret == `no_feed)
          {
             UI::ChangeWidget (`id(`cronjob), `Enabled, false);
             UI::ChangeWidget (`id(`cronjob), `Value, false);
             UI::ChangeWidget (`id(`feedsync_now), `Enabled, false);
             continue;
          }
        else if (ret == `onf || ret == `gsf)
          {
             UI::ChangeWidget (`id(`cronjob), `Enabled, true);
             UI::ChangeWidget (`id(`feedsync_now), `Enabled, false);
             continue;
          }
        

        /* Abort? */
        if (ret == `abort)
        {
            if (OpenvasSecurityScanner::Abort ()) break;
            else continue;
        }
        /* Next */
        else if (ret == `next)
        {
            ret = UI::QueryWidget (`id(`feed), `CurrentButton);
            string choice = "";
            if (ret == `no_feed)
               choice = "No Feed";
            else if (ret == `onf)
               choice = "OpenVAS NVT Feed";
            else if (ret == `gsf)
               choice = "Greenbone Security Feed";

            /* Check whether the feed-choice changed, do nothing if so */
            if (OpenvasSecurityScanner::feed_choice == choice)
              ret = `write;
            else
            {
                OpenvasSecurityScanner::feed_choice = choice;
                if (choice == "No Feed")
                {
                    ret = `no_feed;
                }
                else
                {
                    ret = `fetch_new;
                }
            }

            /** @todo Check whether cronjob script is installed, not allow/ grey out choice otherwise. */
            any ui_dailysync = UI::QueryWidget (`id(`cronjob), `Value);

            if (!(boolean) ui_dailysync || choice == "No Feed")
            {
              SCR::Execute (.target.remove, "/etc/cron.daily/openvas-nvt-sync");
              SCR::Execute (.target.remove, "/etc/cron.daily/greenbone-nvt-sync");
              OpenvasSecurityScanner::daily_sync = false;
            }
            else // Daily sync was checked
            {
              if (choice == "OpenVAS NVT Feed")
                {
                  SCR::Execute (.target.symlink, "/usr/sbin/openvas-nvt-sync", "/etc/cron.daily/openvas-nvt-sync");
                  SCR::Execute (.target.remove, "/etc/cron.daily/greenbone-nvt-sync");
                }
              else if (choice == "Greenbone Security Feed")
                {
                  SCR::Execute (.target.symlink, "/usr/sbin/greenbone-nvt-sync", "/etc/cron.daily/greenbone-nvt-sync");
                  SCR::Execute (.target.remove, "/etc/cron.daily/openvas-nvt-sync");
                }
              OpenvasSecurityScanner::daily_sync = true;
            }

            break;
        
        }
        /* Do a feed sync */
        else if (ret == `feedsync_now)
        {
            break;
        }
        /* Activate GSF */
        else if (ret == `activate_gsf)
        {
            break;
        }
        /* Deactivate GSF */
        else if (ret == `deactivate_gsf)
        {
            OpenvasSecurityScanner::feed_choice = "No Feed";
            break;
        }
        /* Unknown */
        else
        {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    Wizard::RestoreBackButton ();

    return ret;
}

/**
 * Dialog to enter the location of the Greenbone Security Feed (key) files and scripts
 *
 * @return any dialog result
 */
any EnterGSFLocationDialog () {
    string caption = _("Greenbone Security Feed Activation");


    term contents = `VBox ( `PushButton(`id(`gsf_fromfile), `opt(`notify), _("&Import from file")),
                            `MultiLineEdit(`id(`keytext), _("Greenbone Access Key (can be base64 encoded)"), ""));

    Wizard::SetContentsButtons (caption, contents, 
                                HELPS["activategsf"]:"",
                                Label::BackButton(), Label::NextButton());
    Wizard::DisableBackButton ();

    any ret = nil;
    while (true) {
        ret = UI::UserInput ();
        if (ret == `abort)
        {
            break;
        }
        else if (ret == `gsf_fromfile)
        {
           string ret_path = UI::AskForExistingFile ("/home/", "", "Choose the Greenbone Access Key File");
           if (ret_path == nil || ret_path == "")
             continue;
           any text = SCR::Read (.target.string, ret_path);
           UI::ChangeWidget (`id(`keytext), `Value, text);
        }
        else if (ret == `next)
        {
           string text = (string) UI::QueryWidget(`id(`keytext), `Value);
           if (issubstring (text, "-----BEGIN RSA PRIVATE KEY-----"))
           {
             /*  Assuming its not base64 encoded */
             SCR::Write (.target.string, "/etc/openvas/gsf-access-key", text);
           }
           else
           {
               /*  Assuming it is base64 encoded */
               SCR::Write (.target.string, "/etc/openvas/gsf-access-key.b64", text);
               SCR::Execute (.target.bash, "base64 -d /etc/openvas/gsf-access-key.b64 > /etc/openvas/gsf-access-key");
               SCR::Execute (.target.bash, "rm /etc/openvas/gsf-access-key.b64");
           }
           break;
        }
        else
        {
            y2error ("unexpected retcode: %1", ret);
            continue;
        }
    }

    Wizard::RestoreBackButton ();
    return ret;
}

/**
 * Dialog showing progress of disabling the OpenVAS Security Scanner Service.
 *
 * @return any dialog result
 */
any DisableOpenVASDialog () {
   Wizard::RestoreHelp (HELPS["disableopenvas"]:"");
   boolean ret = OpenvasSecurityScanner::DisableOpenVAS ();
   return ret ? `next : `abort;
}

/**
 * Dialog showing progress of deactivating the Greenbone Security Feed.
 *
 * @return any dialog result
 */
any DeactivateGSFDialog () {
   Wizard::RestoreHelp (HELPS["deactivategsf"]:"");
   boolean ret = OpenvasSecurityScanner::DeactivateGSF ();
   return ret ? `next : `abort;
}


/**
 * Dialog to create an (openvas) user.
 *
 * @return Yet unused next or abort.
 */
any AddUserDialog () {
    string caption = _("Add User to OpenVAS Security Scanner");
    string message = _("In order for the OpenVAS Security Scanner to work,\na openvas login has to be registered.\n");

    term contents = `VBox (`Label(message),
                           `InputField(`id(`user_login), _("&Login of the user"), ""));
    contents = add (contents, `Password(`id(`user_pass), _("&Password for user"), ""));
    contents = add (contents, `Password(`id(`user_pass_again), _("P&assword for user (again)"), ""));

    Wizard::SetContentsButtons (caption, contents,
                                HELPS["adduser"]:"",
                                Label::BackButton(), Label::NextButton());
    Wizard::DisableBackButton ();

    any ret = nil;

    while (true) {
        ret = UI::UserInput ();
        if (ret == `abort)
        {
            break;
        }
        else if (ret == `next)
        {
	   any login = UI::QueryWidget(`id(`user_login), `Value);
	   any pw1 = UI::QueryWidget(`id(`user_pass), `Value);
	   any pw2 = UI::QueryWidget(`id(`user_pass_again), `Value);
           // Do some input checks
           if (login == nil || login == "")
             {
               Popup::Message(_("Login name must not be empty."));
               continue;
             }
           else if (issubstring ((string)login, " ") || issubstring ((string)pw1, " ") || issubstring ((string)pw2, " ")
                    || issubstring ((string)login, ".."))
             {
               Popup::Message (_("Login name and password must not contain space character or double dots."));
               continue;
             }
           if (pw1 == pw2)
             {
               string addUserCmd = "printf \"" + (string) login + "\n\n" + (string) pw1 + "\n" + (string) pw2 + "\n\n\" | openvas-adduser";

               integer ret = (integer) SCR::Execute (.target.bash, addUserCmd);
               if (ret != 0) Popup::Message (_("Error creating user, try to create it yourself with openvas-adduser and inspect messages."));

               Wizard::RestoreBackButton ();
               return `next;
             }
           else
             {
               Popup::Message(_("Must enter equal passwords"));
               continue;
             }
           break;
        }
        else
        {
            y2error ("unexpected return code: %1", ret);
            continue;
        }
    }

    Wizard::RestoreBackButton ();
    return ret;
}


/* EOF */
}

