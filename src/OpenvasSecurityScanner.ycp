/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/OpenvasSecurityScanner.ycp
 * Package:	Configuration of openvas-security-scanner
 * Summary:	OpenvasSecurityScanner settings, input and output functions
 * Authors:	Felix Wolfsteller <felix.wolfsteller@intevation.de>
 *
 * $**Id$
 *
 * Representation of the configuration of openvas-security-scanner.
 * Input and output routines.
 */

{

module "OpenvasSecurityScanner";
textdomain "openvas-security-scanner";

import "FileUtils";
import "Message";
import "Popup";
import "Progress";
import "Report";
import "SCR";
import "Service";
import "Summary";


/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
boolean write_only = false;

/**
 * The users choosen feed. Currently one of "No Feed",
 * "Greenbone Security Feed" or "OpenVAS NVT Feed".
 */
global any feed_choice = "";

/**
 * Whether or not the user choose to daily synchronize with feed via a cron job.
 */
global boolean daily_sync = false;


/**
 * Sleeping time beetwing progress steps.
 */
integer sl = 20;


/**
 * Returns whether the /usr/sbin/greenbone-nvt-sync and
 * /etc/openvas/gsf-access-key exist.
 * @return true if /usr/sbin/greenbone-nvt-sync and /etc/openvas/gsf-access-key
 *         exist.
 */
global boolean IsGSFInstalled () {
   if (FileUtils::Exists ("/usr/sbin/greenbone-nvt-sync") && FileUtils::Exists ("/etc/openvas/gsf-access-key"))
       return true;

   return false;
}

/**
 * Ask if user really wants to abort
 * @return true on user intended abort.
 */
global boolean Abort () {
    return Popup::ReallyAbort (true);
}

/**
 * Checks whether an Abort button has been pressed.
 * If so, calls function to confirm the abort call.
 *
 * @return true if abort confirmed
 */
global boolean PollAbort () {
    if (UI::PollInput () == `abort)
	return Abort ();

    return false;
}

/**
 * Removes contents of /var/cache/openvas .
 * @return true.
 */
boolean CleanCache () {
    SCR::Execute (.target.bash, "for i in /var/cache/openvas/*; do rm -rf $i; done");
    return true;
}

/**
 * Removes contents of /usr/lib/openvas/plugins .
 * @return true.
 */
boolean CleanNVTDir () {
    SCR::Execute (.target.bash, "for i in /usr/lib/openvas/plugins/*; do rm -rf $i; done");
    return true;
}


/**
 * Checks /var/lib/openvas/users/ for content. If content is found this means a user
 * for openvas exists.
 * @return true if users were found, false otherwise.
 */
global boolean CheckUserExists () {
    list<string> users = (list<string>) SCR::Read(.target.dir, "/var/lib/openvas/users/");
    if (size(users) > 0)
      return true;
    else
      return false;
}


/**
 * Read all OpenVAS Security Scanner settings
 * @return true on success
 */
global boolean Read() {
    /* OpenvasSecurityScanner read dialog caption */
    string caption = _("Initializing OpenVAS Security Scanner Configuration");

    integer steps = 2;

    Progress::New (caption, " ", steps, [
      /* Progress stage 1/2 */
      _("Read current OpenVAS Security Scanner configuration"),
      /* Progress stage 2/2 */
      _("Read current openvas-scanner state")
    ], [
      /* Progress stage 1/2 */
      _("Reading current OpenVAS Security Scanner configuration..."),
      /* Progress stage 2/2 */
      _("Reading current openvas-scanner state..."),
      /* Progress finished */
      Message::Finished ()
    ],"");

    sleep (sl);

    if (PollAbort ()) return false;
    Progress::NextStage ();
    if (false) Report::Error (Message::CannotReadCurrentSettings ());
    sleep (sl);

    if (PollAbort ()) return false;
    Progress::NextStep();
    if (false) Report::Error (_("Cannot read current openvas-scanner state."));
    sleep (sl);

    if (PollAbort ()) return false;
    Progress::NextStage ();
    sleep (sl);

    feed_choice = SCR::Read (.etc.sysconfig.openvas-scanner.feed);
    if (feed_choice == nil)
       feed_choice = "No Feed";

    daily_sync = (SCR::Read (.etc.sysconfig.openvas-scanner.daily_sync) == "yes");

    return true;
}


/**
 * Write all OpenVAS Security Scanner settings.
 * @return true on success
 */
global boolean Write() {
    /* Openvas Security Scanner write dialog caption */
    string caption = _("Saving OpenVAS Security Scanner Configuration");

    integer steps = 2;
    
    Progress::New (caption, " ", steps, [
    /* Progress stage 1/2 */
    _("Write the OpenVAS Security Scanner settings")
], [
    /* Progress step 1/2 */
    _("Writing the OpenVAS Security Scanner settings..."),
    Message::Finished ()
],
""
    );

    sleep (sl);

    /* Write settings to conf file */
    if (PollAbort ()) return false;
    Progress::NextStage ();
    /* Error message */
    if (!SCR::Write (.etc.sysconfig.openvas-scanner.feed, feed_choice)
        || !SCR::Write (.etc.sysconfig.openvas-scanner.daily_sync, daily_sync ? "yes" : "no")
        || !SCR::Write (.etc.sysconfig.openvas-scanner, nil)){
        SCR::Write (.etc.sysconfig.openvas-scanner, nil);
        Report::Error (_("Cannot write OpenVAS Security Scanner settings."));
    }

    sleep (sl);

    Progress::NextStage ();

    return true;
}


/**
 * Disable the openvas service and clean up the cache and plugins directory.
 * @return true on success
 */
global boolean DisableOpenVAS () {
   string caption = _("Disable the OpenVAS Security Scanner");
   integer steps = 3;

   Progress::New (caption, " ", steps, [
   /* Progress stage 1/3 */
   _("Stopp the OpenVAS Security Scanner service"),
   /* Progress stage 2/3 */
   _("Disable the OpenVAS Security Scanner service"),
   /* Progress stage 3/3 */
    _("Delete the NVT datastores"),
   ],[
   /* Progress stage 1/3 */
   _("Stopping the OpenVAS Security Scanner service..."),
   /* Progress stage 2/3 */
   _("Disabling the OpenVAS Security Scanner service..."),
   /* Progress stage 3/3 */
    _("Deleting the NVT datastores..."),
   Message::Finished ()
   ], "");

    /* Stop the service (if running) */
    if (PollAbort ())
        return false;
    Progress::NextStage ();
    Service::Stop ("openvas-scanner");
    sleep (sl);

    /* Disable the service */
    if (PollAbort ())
        return false;
    Progress::NextStage ();
    Service::Adjust ("openvas-scanner", "disable");
    sleep (sl);

    /* Clean NVT Cache and Collection */
    if (PollAbort ())
        return false;
    Progress::NextStage ();
    CleanCache ();
    CleanNVTDir ();
    sleep (sl);

    Progress::NextStage ();
    sleep (sl);

    return true;
}

/**
 * Fetches a NVT Feed.
 * @return true on success
 */
global boolean FetchFeed () {
    string caption = _("Fetching NVT Feed");

    integer steps = 4;
    
    Progress::New (caption, " ", steps, [
    /* Progress stage 1/4 */
    _("Stop the OpenVAS Security Scanner service"),
    /* Progress stage 2/4 */
    _("Delete the NVT datastores (may take a while)"),
    /* Progress stage 3/4 */
    _("Fetch the Feed (may take a while)"),
    /* Progress stage 4/4 */
    _("Start the OpenVAS Security Scanner service (may take a while)")
    ], [
    /* Progress stage 1/4 */
    _("Stopping the OpenVAS Security Scanner service..."),
    /* Progress stage 2/4 */
    _("Deleting the NVT datastores  (may take a while)..."),
    /* Progress stage 3/4 */
    _("Fetching the Feed (may take a while)..."),
    /* Progress stage 4/4 */
    _("Starting the OpenVAS Security Scanner service (may take a while)..."),
    Message::Finished ()
    ], "");

    sleep (sl);

    /* Stop openvas service */
    if (PollAbort())
        return false;
    Progress::NextStage ();
    Service::Stop ("openvas-scanner");
    sleep (sl);

    /* Clean the NVT Cache and Collection */
    if (PollAbort ())
        return false;
    Progress::NextStage ();
    CleanCache ();
    CleanNVTDir ();
    sleep (sl);

    /* Sync with feed */
    if (PollAbort ())
        return false;
    Progress::NextStage ();
    if (feed_choice == "Greenbone Security Feed")
      SCR::Execute (.target.bash, "greenbone-nvt-sync");
    else
      SCR::Execute (.target.bash, "openvas-nvt-sync");
    /** @todo Once the feed synchronization scripts have been consolidated, it
      *       will be possible to check the return. */
    sleep (sl);

    /* Start openvas service */
    if (PollAbort ()) return false;
    Progress::NextStage ();
    Service::Adjust ("openvas-scanner", "enable");
    if (!Service::Start ("openvas-scanner"))
        Report::Error (_("Could not start OpenVAS Security Scanner service."));
        /** Report::Error (Message::CannotAdjustService ("openvas-scanner"));
          * might be more accurate */
    sleep (sl);

    Progress::NextStage ();
    sleep (sl);

    return true;
}

/**
 * Fetches a NVT Feed.
 * @return true on success
 */
global boolean SyncWithFeed () {
    string caption = _("Synchronization with NVT Feed");

    integer steps = 3;
    
    Progress::New (caption, " ", steps, [
    /* Progress stage 1/3 */
    _("Stop the OpenVAS Security Scanner service"),
    /* Progress stage 2/3 */
    _("Fetch the Feed (may take a while)"),
    /* Progress stage 2/3 */
    _("Start the OpenVAS Security Scanner service (may take a while)")
    ], [
    /* Progress stage 1/3 */
    _("Stopping the OpenVAS Security Scanner service..."),
    /* Progress stage 2/3 */
    _("Fetching the Feed (may take a while)..."),
    /* Progress stage 3/3 */
    _("Starting the OpenVAS Security Scanner service (may take a while)..."),
    Message::Finished ()
    ], "");

    sleep (sl);

    /* Stop openvas service */
    if (PollAbort())
        return false;
    Progress::NextStage ();
    Service::Stop ("openvas-scanner");
    sleep (sl);

    /* Sync with feed */
    if (PollAbort ())
        return false;
    Progress::NextStage ();
    if (feed_choice == "Greenbone Security Feed")
      SCR::Execute (.target.bash, "greenbone-nvt-sync");
    else
      SCR::Execute (.target.bash, "openvas-nvt-sync");
    /** @todo Once the feed synchronization scripts have been consolidated, it
      *       will be possible to check the return. */
    sleep (sl);

    /* Start openvas service */
    if (PollAbort ()) return false;
    Progress::NextStage ();
    Service::Adjust ("openvas-scanner", "enable");
    if (!Service::Start ("openvas-scanner"))
        Report::Error (_("Could not start OpenVAS Security Scanner service."));
        /* Report::Error (Message::CannotAdjustService ("openvas-scanner"));
         * might be more accurate */
    sleep (sl);

    Progress::NextStage ();
    sleep (sl);

    return true;
}

/**
 * Deactivate the GSF.
 *
 * @return TRUE is not aborted, false otherwise.
 */
global boolean DeactivateGSF () {
    /* Deactivate Greenbone Security Feed dialog caption */
    string caption = _("Deactivate the Greenbone Security Feed Subscription");

    integer steps = 2;
    
    Progress::New(caption, " ", steps, [
    /* Progress stage 1/2 */
    _("Remove Greenbone Security Feed Access Key"),
    /* Progress stage 1/2 */
    _("Delete NVT datastores"),
], [
    /* Progress stage 1/2 */
    _("Removing Greenbone Security Feed Access Key..."),
    /* Progress stage 2/2 */
    _("Deleting NVT datastores..."),
    Message::Finished ()
    ], "");

    sleep (sl);

    /* Removing Access Key */
    if (PollAbort ()) return false;
    Progress::NextStage ();
    SCR::Execute (.target.bash, "rm -rf /etc/openvas/gsf-access-key");
    //sleep (sl);

    /* Clean the NVT Cache and Collection */
    if (PollAbort ()) return false;
    Progress::NextStage ();
    CleanCache ();
    CleanNVTDir ();
    sleep (sl);

    return true;
}

/**
 * Import the Access Key, delete the file.
 * @return true if greenbone access key import succeeded.
 */
global boolean ImportGreenboneKey () {
    // Ensure /etc/openvas/gnupg exists
    SCR::Execute (.target.bash, "mkdir -p /etc/openvas/gnupg");
    SCR::Execute (.target.bash, "chmod 770 /etc/openvas/gnupg");

    // Import key
    SCR::Execute (.target.bash, "chmod 400 /etc/openvas/gsf-access-key");
    string cmd = "gpg --homedir=/etc/openvas/gnupg --status-file /var/log/openvas/gbkeyimport.state --logger-file /var/log/openvas/gbkeyimport.log --import /etc/openvas/gsf-access-key";
    integer ret = (integer) SCR::Execute (.target.bash, cmd);
    if (ret != 0)
    {
      Report::Error (_("The Greenbone Access Key could not be imported."));
      return false;
    }
    // Set trust in the Greenbone Security Feed Signing Key
    ret = (integer) SCR::Execute (.target.bash, "echo `grep IMPORT_OK /var/log/openvas/gbkeyimport.state | cut -d \" \" -f 4`:6: | gpg --homedir=/etc/openvas/gnupg --status-file /var/log/openvas/gbkeytrust.state --logger-file /var/log/openvas/gbkeytrust.log --import-ownertrust");
    if (ret != 0)
    {
      Report::Error (_("Trust-level for the Greenbone Access Key could not be set."));
      return false;
    }

    // Remove the log and state files
    SCR::Execute (.target.bash, "rm -f /var/log/openvas/gbkeyimport.state /var/log/openvas/gbkeyimport.log /var/log/openvas/gbkeytrust.state /var/log/openvas/gbkeytrust.log");

    // Check whether signature checks are enabled
    map result = (map) SCR::Execute (.target.bash_output, "openvassd -s | grep nasl_no_signature_check | sed 's/nasl\_no\_signature\_check\ *=\ *//'");
    if (result["stdout"]:"" != "no\n")
    {
      y2milestone ("stdout: _%1_", result["stdout"]:"");
      Popup::Warning (_("You seem to have disabled signature checking in your OpenVAS configuration.\n\nPlease make sure that the line\n    nasl_no_signature_check = no\noccurs in the file /etc/openvas/openvassd.conf."));
    }

    return true;
}

/**
 * Fetches a NVT Feed.
 * @return true on success
 */
global boolean ActivateGSF () {
    /* Openvas Security Scanner Feed Fetching dialog caption */
    string caption = _("Activate the Greenbone Security Feed Subscription");

    integer steps = 3;
    
    Progress::New(caption, " ", steps, [
    /* Progress stage 1/3 */
    _("Add feed.greenbone.net to list of known hosts"),
    /* Progress stage 2/3 */
    _("Import Greenbone Key"),
    /* Progress stage 3/3 */
    _("Test Key")
], [
    /* Progress stage 1/3 */
    _("Adding feed.greenbone.net to list of known hosts"),
    /* Progress stage 2/3 */
    _("Importing Greenbone Key..."),
    /* Progress stage 3/3 */
    _("Testing Key..."),
    Message::Finished ()
    ], "");

    sleep(sl);

    /* Adding greenbone feed location to list of known hosts */
    if (PollAbort ()) return false;
    Progress::NextStage ();
    SCR::Execute (.target.bash, "touch /root/.ssh/known_hosts");
    SCR::Execute (.target.bash, "echo \"[feed.greenbone.net]:24,[193.108.181.139]:24 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAmVIt4lOPi1lVJfFCtiNjGR4kHj377C6jMY4iaxotYueuGq8l8B1YIMUMLQzaUeaPwOGMZl5mWUT158zaiWK4zOzZarFLey6JrKfrnDZMdCcCneZPBRbMJUxiV1jv4U+/Vp/V1wO6OJ+S9XkodxvN9+vjAhcXspKXcRol30+T9mgilWK+nvSTVEhce+JJYz+gdQFN+1xgkPhjGbXSjHT7zB5fVjWe7TYLGhdqj1U+NTVOcKNn0wMBRGM3T63rKV71KI1hmLdX6+VmVQOCjYpqsFRh0TZadh5cEE5gmPDCnGlXCA9BrilOMSRvsTySs30xN4/Z5RHPWbDS0rwvqBf9Lw==\" >> /root/.ssh/known_hosts");
    sleep (sl);

    /* Import the Greenbone Access Key */
    boolean bret = ImportGreenboneKey();
    if (bret == false)
    {
        Report::Error (_("The greenbone key could not be imported."));
    }
    sleep(sl);


    /* Do a self test */
    if (PollAbort ()) return false;
    Progress::NextStage ();
    integer ret = (integer) SCR::Execute (.target.bash,
                                  "greenbone-nvt-sync --selftest");
    if (ret != 0)
    {
        Report::Error (_("The synchronization test failed."));
    }
    sleep (sl);

    Progress::NextStage ();
    sleep (sl);

    return true;
}

/* EOF */
}
